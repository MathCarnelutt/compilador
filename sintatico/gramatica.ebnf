(* Programa e bloco *)
progama = 'program', identificador, ';', bloco, '.' ;

bloco =
    [ parte declaracao variavel ],
    [ parte declaracao sub rotinas ],
    comando composto
;

(* Declaracoes *)
tipo = identificador ;

parte declaracao variavel = 'var', declaracao variavel, { ';', declaracao variavel }, ';' ;

declaracao variavel = lista identificador, ':', tipo ;

lista identificador = identificador, { ',', identificador } ;

parte declaracao sub rotina =
    {
        ( declaracao procedimento, ';' ) |
        ( declaracao funcao, ';' )
    }
;

declaracao procedimento =
    'procedure', identificador,
        [ parametros formais ], ';', bloco
;

declaracao funcao =
    'function', identificador
        [ parametros formais ], ';', identificador, bloco
;

parametros formais =
    '(', secao parametros formais,
    { ';', secao parametros formais }, ')'
;

secao parametros formais =
    ( [ 'var' ], lista identificador, ':', identificador )
;

(* Comandos *)
comando composto = 'begin', comando, { ';', comando }, 'end' ;

comando = comando sem rotulo ;

comando sem rotulo =
    atribuicao |
    chamada procedimento |
    comando composto |
    comando condicional |
    comando repetitivo |
    funcao read |
    funcao write
;

atribuicao = variavel, ':=', expressao ;

chamada procedimento = identificador, [ '(', lista expressao, ')' ] ;

comando condicional =
    'if', expressao, 'then', comando sem rotulo,
                    [ 'else', comando sem rotulo ]
;

comando repetitivo = 'while', expressao, 'do', comando sem rotulo ;

funcao read = 'read', '(', identificador, ')' ;

funcao write = 'write', '(', lista expressao, ')' ;

(* Expressoes *)
lista expressao = expressao, { ',', expressao } ;

expressao = expressao simples, [ relacao, expressao simples ] ;

relacao = '=' | '<>' | '<' | '<=' | '>=' | '>' ;

expressao simples =
    [ '+' | '-' ], termo,
    { [ '+' | '-' | 'or' ], termo }
;

termo = fator, { '*' | 'div' | 'and', fator } ;

fator =
    variavel |
    numero |
    chamada funcao |
    ( '(', expressao, ')' ) |
    ( 'not', fator )
;

variavel = identificador ;

chamada funcao = identificador, [ '(', lista expressao, ')' ] ;
